import groovy.json.JsonSlurper

def getAcrLoginServer(def acrSettingsJson) {
  def acrSettings = new JsonSlurper().parseText(acrSettingsJson)
  return acrSettings.loginServer
}

node {
  stage('init') {
    mvnHome = tool 'MVN3'
    checkout scm
  }
  


  stage('build') {
    //Use MVN_Home to locate Maven
    withEnv(["MVN_HOME=$mvnHome"]) {
         if (isUnix()) {
            sh '"$MVN_HOME/bin/mvn" clean package'
         } else {
            bat(/"%MVN_HOME%\bin\mvn" clean package/)
         }
      }
  }
  
  stage('deploy') {
    def dockerHub = 'https://harbor.dev.cloudsprint.io'
    def imageName = 'calculator'
    // generate version, it's important to remove the trailing new line in git describe output
    def version = sh script: 'git describe | tr -d "\n"', returnStdout: true
    sh "echo 'build completed'"
    withCredentials([azureServicePrincipal('JavaK8sCred001')]) {
      // login Azure
      sh '''
        echo $PATH
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
        az account set -s $AZURE_SUBSCRIPTION_ID
      '''
      script {
                    echo 'Start - Build and push image with Jenkins docker-plugin'
                    withDockerServer([uri: "127.0.0.1:4243"]) {
                      echo 'withdockerServer'
                        withDockerRegistry([credentialsId: 'DockerRegistryLoginMadhu', url: "https://harbor.dev.cloudsprint.io"]) {
                            echo 'withDockerRegistry.'
                            // we give the image the same version as the .war package
                            def image = docker.build("harbor.dev.cloudsprint.io/calculator", "--build-arg PACKAGE_VERSION=1.1 ./")
                            image.push()
                            echo 'Done pushing the image.'
                        }
                    }
                }
      
      //sh "docker login -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET $loginServer"
      // build image
      def imageWithTag = "$loginServer/$imageName:$version"
      def image = docker.build imageWithTag
      // push image
      image.push()
      // update deployment.yaml with latest tag
      sh "sed 's/\$version/$version/g' deployment.yaml > target/deployment.yaml"
      // update deployment
      sh 'kubectl apply -f target/deployment.yaml'
      // log out
      sh 'az logout'
      sh "docker logout $loginServer"
    }
  }
}
